apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8sistioinjection
spec:
  crd:
    spec:
      names:
        kind: K8sIstioInjection
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          properties:
            message:
              type: string
            labels:
              type: array
              items:
                type: object
                properties:
                  key:
                    type: string
                  allowedValue:
                    type: string
            exemptNamespaces:
              type: array
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
         package k8sistioinjection
 
         get_message(parameters, _default) = msg {
           not parameters.message
           msg := _default
         }
 
         get_message(parameters, _default) = msg {
           msg := parameters.message
         }
         namespace = true {
               provided_ns := {input.review.object.metadata.name} & cast_set(input.parameters.exemptNamespaces)
               count(provided_ns) != 1
         }
  
         violation[{"msg": msg, "details": {"missing_labels": missing}}] {
           namespace
           provided := {label | input.review.object.metadata.labels[label]}
           required := {label | label := input.parameters.labels[_].key}
           missing := required - provided
           count(missing) > 0
           def_msg := sprintf("you must provide labels: <%v>", [missing])
           msg := get_message(input.parameters, def_msg)
         }
 
         violation[{"msg": msg}] {
           value := input.review.object.metadata.labels[key]
           expected := input.parameters.labels[_]
           expected.key == key
           expected.allowedValue != ""
           not expected.allowedValue == value
           def_msg := sprintf("Label <%v> does not does not have the correct value: expected value is <%v> received value <%v>", [key, expected.allowedValue,value])
           msg := get_message(input.parameters, def_msg)
         }
 
